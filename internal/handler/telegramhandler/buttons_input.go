package telegramhandler

import (
	"fin_api_gateway/internal/service"
	"fmt"
	"github.com/mymmrac/telego"
	tu "github.com/mymmrac/telego/telegoutil"
)

func ButtonPressHandler(bot *telego.Bot, query telego.CallbackQuery) {
	chatId := query.Message.GetChat().ID
	if userInputs[chatId] == nil {
		userInputs[chatId] = &InputItem{}
	}

	// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç–æ–≤
	indicatorIsSelected := false
	var statusText string

	switch query.Data {
	case "price":
		indicatorIsSelected = true
		userInputs[chatId].Indicator = "price"
	case "pbv":
		indicatorIsSelected = true
		userInputs[chatId].Indicator = "pbv"
	case "ps":
		indicatorIsSelected = true
		userInputs[chatId].Indicator = "ps"
	case "pe":
		indicatorIsSelected = true
		userInputs[chatId].Indicator = "pe"
	}

	if indicatorIsSelected && userInputs[chatId].Ticker == "" {
		userInputs[chatId].Status = "waiting_for_ticker"

		_, _ = bot.SendMessage(tu.Message(tu.ID(chatId), "üö´–≠–º–∏—Ç–µ–Ω—Ç –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω!\n–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä üìà —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã üî†").WithReplyMarkup(tu.InlineKeyboard(
			tu.InlineKeyboardRow(
				tu.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥").WithCallbackData("back"),
			))))

	} else if indicatorIsSelected {

		userInputs[chatId].Status = "waiting_for_value"
		statusText = fmt.Sprintf("–î–ª—è —ç–º–∏—Ç–µ–Ω—Ç–∞ üìà %s –≤—ã–±—Ä–∞–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä üìê%s", userInputs[chatId].Ticker, userInputs[chatId].Indicator)
		_, _ = bot.SendMessage(tu.Message(tu.ID(chatId), statusText))
		_, _ = bot.SendMessage(tu.Message(tu.ID(chatId), fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ %s üî¢", userInputs[chatId].Indicator)).WithReplyMarkup(tu.InlineKeyboard(
			tu.InlineKeyboardRow(
				tu.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥").WithCallbackData("back"),
			))))
	}

	// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ü–µ–ª–µ–π
	switch query.Data {
	case "add_target":
		_, _ = bot.SendMessage(tu.Message(tu.ID(query.Message.GetChat().ID), "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä —ç–º–∏—Ç–µ–Ω—Ç–∞ üìà —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã üî†").WithReplyMarkup(tu.InlineKeyboard(
			tu.InlineKeyboardRow(
				tu.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥").WithCallbackData("back"),
			),
		)))
		userInputs[query.Message.GetChat().ID].Status = "waiting_for_ticker"
	case "my_targets":
		// –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π
		_, _ = bot.SendMessage(tu.Message(tu.ID(query.Message.GetChat().ID), "üîç –¶–µ–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã").WithReplyMarkup(tu.InlineKeyboard(
			tu.InlineKeyboardRow(
				tu.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥").WithCallbackData("back"),
			),
		)))
	case "back": // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
		//delete(userInputs, query.Message.GetChat().ID)
		_, _ = bot.SendMessage(tu.Message(tu.ID(query.Message.GetChat().ID), "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ").WithReplyMarkup(tu.InlineKeyboard(
			tu.InlineKeyboardRow(
				tu.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å").WithCallbackData("add_target"),
			),
			tu.InlineKeyboardRow(
				tu.InlineKeyboardButton("–ú–æ–∏ —Ü–µ–ª–∏").WithCallbackData("my_targets"),
			),
		)))
	}

	// –û—Ç–≤–µ—Ç –≤–≤–µ—Ä—Ö—É —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	currSelectionText := service.GetTgCurrentSelectionText(userInputs[chatId].Ticker, userInputs[chatId].Indicator)
	_ = bot.AnswerCallbackQuery(tu.CallbackQuery(query.ID).WithText(currSelectionText))
}
