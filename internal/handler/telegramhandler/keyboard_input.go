package telegramhandler

import (
	"fin_api_gateway/db"
	"fin_api_gateway/internal/entities"
	"fin_api_gateway/internal/service"
	"fmt"
	"github.com/mymmrac/telego"
	tu "github.com/mymmrac/telego/telegoutil"
	"strconv"
)

func KeyboardInputHandler(bot *telego.Bot, message telego.Message) {
	handleDbMessageRequest(bot, message, func(db *db.Connection) {
		if input, exists := userInputs[message.Chat.ID]; exists {
			if input.Status == "waiting_for_ticker" {
				ticker := message.Text

				securityModel, isValidTicker := entities.ValidateTicker(ticker)

				if isValidTicker {
					userInputs[message.Chat.ID].Status = "waiting_for_indicator"
					userInputs[message.Chat.ID].Ticker = securityModel.Ticker
					text := fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —Ü–µ–ª–∏ –ø–æ %s", ticker)
					_, _ = bot.SendMessage(tu.Message(tu.ID(message.Chat.ID), text).WithReplyMarkup(tu.InlineKeyboard(
						tu.InlineKeyboardRow(
							tu.InlineKeyboardButton("price").WithCallbackData("price"),
							tu.InlineKeyboardButton("p / bv").WithCallbackData("pbv"),
						),
						tu.InlineKeyboardRow(
							tu.InlineKeyboardButton("p / e").WithCallbackData("pe"),
							tu.InlineKeyboardButton("p / s").WithCallbackData("ps"),
						),
						tu.InlineKeyboardRow(
							tu.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥").WithCallbackData("back"),
						),
					)))
				} else {
					hintMessage := service.GetSecuritiesHint()
					_, _ = bot.SendMessage(tu.Message(tu.ID(message.Chat.ID), fmt.Sprintf("üö´–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–∫–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: %s", hintMessage)))
				}
			} else if input.Status == "waiting_for_value" {
				// value -> _
				value, err := strconv.ParseFloat(message.Text, 32)

				if err == nil {
					// –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

					tgUser := entities.FirstOrCreateTgUser(message.From.ID, message.From.Username)

					curr := userInputs[message.Chat.ID]

					userTarget := entities.NewUserTarget(
						nil, &tgUser.ID, curr.Ticker, curr.Indicator, float32(value), "rsbu", "telegram")

					err = userTarget.Save(db.DB)
					if err != nil {
						fmt.Println(err)
					} else {
						successMsgText := fmt.Sprintf("–¶–µ–ª—å üìê %s –ø–æ üìà %s —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ üíæ", userTarget.ValuationRatio, userTarget.Ticker)
						_, _ = bot.SendMessage(tu.Message(tu.ID(message.Chat.ID), successMsgText))
					}

					//delete(userInputs, message.Chat.ID) // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
					// –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
					_, _ = bot.SendMessage(tu.Message(tu.ID(message.Chat.ID), "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ").WithReplyMarkup(tu.InlineKeyboard(
						tu.InlineKeyboardRow(
							tu.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å").WithCallbackData("add_target"),
						),
						tu.InlineKeyboardRow(
							tu.InlineKeyboardButton("–ú–æ–∏ —Ü–µ–ª–∏").WithCallbackData("my_targets"),
						),
					)))
				} else {
					_, _ = bot.SendMessage(tu.Message(tu.ID(message.Chat.ID), "üò¢–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. \n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π. üî¢\n –ü—Ä–∏–º–µ—Ä: GAZP"))
				}
			}
		}

	})
}
